/* Diese Datei √§ndert das Aussehen der HTML-Elemente, da quiz.html sie im head einbindet. 
* Kommt am besten wieder her, sobald ihr den CSS Kurs angefangen habt :) 
*/

body {
  font-family: 'Lucida Grande', 'Lucida Sans Unicode', 'Lucida Sans', Arial, sans-serif;
}

h1 {
  text-transform: capitalize;
}

h1,
h2 {
  text-align: center;
  padding-bottom: 0.5em;
}

.intro {
  font-size: 16px;
  margin-bottom: 1em;
}

/* .intro > * ist ein etwas "fortgeschrittener" CSS-Selektor. Ihr m√ºsst ihn von hinten nach vorn lesen - 
er sagt "Jedes Element (*) das DIREKTES Kind (>) von Elementen mit der Klasse (.) intro sind" */
.intro > *,
.question,
.footer {
  margin: auto;
  max-width: 800px;
}

#splashscreen {
  display: block;
}

/* Falls euch _wirklich_ interessiert, was display:flex tut, lege ich euch den Artikel von CSS Tricks ans Herz. 
https://css-tricks.com/snippets/css/a-guide-to-flexbox/ */
.question .block-answer,
.answer-headers {
  margin: auto;
  display: flex;
  width: 100%;
}

.block-answer .input,
.block-answer answer,
.answer-headers h5 {
  flex: 0 0 50%;
}

h3,
h5 {
  color: grey;
}

.question .question-text {
  flex: 2 0 100%;
  font-style: unset;
  font-size: 18px;
}

/* calc() ist eine spezielle CSS Funktion, die es erm√∂glicht, Einheiten gegeneinander zu verrechnen. Das ist super praktisch,
falls ihr relative Gr√∂√üen habt (wie die Prozentangabe), aber eine feste Gr√∂√üe, etwa f√ºr eine L√ºcke, abziehen m√ºsst.
Es gibt einen ganzen Haufen von diesen Funktionen: https://developer.mozilla.org/en-US/docs/Web/CSS/CSS_Functions */
.question textarea {
  width: calc(100% - 10px);
  height: 7em;
}

.question .answer {
  background-color: #d9d8e1;
  padding: 1em;
  border-radius: 3px;
  min-height: 3em;
  /* Wichtig f√ºr den .flip-btn üëá */
  position: relative;
}

.flip-btn {
  /* Mmmh, Magic! Mit dem "position: absolute" verl√§sst der flip-button die standardm√§√üige Position, die die HTML Struktur ihm eigentlich vorgeben w√ºrde und positioniert sich
  (a) am ersten Parent-Element, das die "position: relative" Regel besitzt oder (b) am h√∂chsten Element, also dem Body. Die right/top Werte geben dar√ºber hinaus an, _wo genau_
  er sich zu seinem relativen Parent positionieren soll. In diesem Falle 5px vom rechten und oberen Rand seines relativen Parents entfernt.  */
  position: absolute;
  right: 5px;
  top: 5px;
  /* "unset" l√∂scht vorgegebene Werte, die bspw. durch vorherige Regeln oder dem Browser selbst definiert wurden. So wird unser Button "unsichtbar". */
  background: unset;
  border: unset;

  color: grey;
  font-size: 12pt;
  cursor: pointer;

  visibility: hidden;
}

.question .answer-text {
  visibility: hidden;
}

.button-hint,
#reveal-btn {
  background-color: #8ef0d2;
  border: 2px solid #51937f;
}

#reveal-btn {
  font-size: 16pt;
  margin: auto;
  padding: 0.5em;
  display: block;
  margin-top: 2em;
}

.hint {
  margin-top: 1em;
  font-size: 9pt;
  color: grey;
}

/* ===
Styles f√ºr [nicht] aufgedeckte Antworten 
=== */
.question .answer:hover .flip-btn {
  visibility: visible;
}

/* Sollte eine Antwort noch verdeckt sein, und zwar nur dann!, m√∂chten wir ihr eine maximale H√∂he geben, damit die Gr√∂√üe des K√§stchen nicht zuviel √ºber die Ausf√ºhrlichkeit
der Antwort verr√§t. Das erm√∂glicht uns der not() selektor: Hiermit selektierne wir alle Elemente, die ein .question als Parent haben und √ºber die Klasse .answer verf√ºgen, die
NICHT auch noch .revealed als Klasse haben. */
.question .answer:not(.revealed) {
  max-height: 5em;
}

.question .answer.revealed {
  background-color: #4dcfd8;
}

.question .answer.revealed .flip-btn {
  color: #1b6f75;
}

.question .revealed .answer-text {
  visibility: visible;
}
